# -*- coding: utf-8 -*-
"""L6_L7_Calcular mÃ©tricas con sklearn

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YIC-YVGvk1oQnaFUDbOrPLfh3qtJaQBp
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.datasets import load_diabetes, load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import (
    mean_absolute_error, mean_squared_error, r2_score,
    accuracy_score, precision_score, recall_score, f1_score,
    roc_auc_score, confusion_matrix, ConfusionMatrixDisplay, RocCurveDisplay
)

# ========================
# MODELO DE REGRESIÃ“N
# ========================
# Dataset: Diabetes
diabetes = load_diabetes()
X_train, X_test, y_train, y_test = train_test_split(
    diabetes.data, diabetes.target, test_size=0.2, random_state=42
)

modelo_reg = LinearRegression()
modelo_reg.fit(X_train, y_train)
y_pred = modelo_reg.predict(X_test)

# MÃ©tricas
print("ðŸ”¹ REGRESIÃ“N (Diabetes)")
print("MAE:", mean_absolute_error(y_test, y_pred))
mse = mean_squared_error(y_test, y_pred) # Calculate MSE
print("MSE:", mse)
print("RMSE:", np.sqrt(mse)) # Calculate RMSE using numpy
print("RÂ²:", r2_score(y_test, y_pred))

# ========================
# MODELO DE CLASIFICACIÃ“N
# ========================
# Dataset: CÃ¡ncer de mama
cancer = load_breast_cancer()
X_train, X_test, y_train, y_test = train_test_split(
    cancer.data, cancer.target, test_size=0.2, random_state=42
)

modelo_clf = KNeighborsClassifier(n_neighbors=5)
modelo_clf.fit(X_train, y_train)
y_pred = modelo_clf.predict(X_test)
y_proba = modelo_clf.predict_proba(X_test)[:, 1]

# MÃ©tricas
print("\nðŸ”¹ CLASIFICACIÃ“N (CÃ¡ncer de mama)")
print("Exactitud:", accuracy_score(y_test, y_pred))
print("PrecisiÃ³n:", precision_score(y_test, y_pred))
print("Sensibilidad (Recall):", recall_score(y_test, y_pred))
print("F1-Score:", f1_score(y_test, y_pred))
print("AUC:", roc_auc_score(y_test, y_proba))

# Matriz de confusiÃ³n
cm = confusion_matrix(y_test, y_pred)
ConfusionMatrixDisplay(cm).plot()
plt.title("Matriz de confusiÃ³n - KNN")
plt.show()

# Curva ROC
RocCurveDisplay.from_estimator(modelo_clf, X_test, y_test)
plt.title("Curva ROC - KNN")
plt.show()
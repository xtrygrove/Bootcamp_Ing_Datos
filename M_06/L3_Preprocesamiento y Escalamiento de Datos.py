# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16fZTq6WlTcrsQpFSlDSRbVTaJok3L86z
"""

import pandas as pd
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import LabelEncoder, OneHotEncoder, MinMaxScaler, StandardScaler

# Datos proporcionados
data = {
    "ID": [1, 2, 3, 4],
    "Edad": [25, 45, 30, 40],
    "Ciudad": ["Madrid", "Sevilla", "Madrid", "Barcelona"],
    "Ingresos": [30000, 50000, None, 40000]
}

df = pd.DataFrame(data)

# 1. Imputar el valor faltante con la media
imputer = SimpleImputer(strategy='mean')
df['Ingresos'] = imputer.fit_transform(df[['Ingresos']])

# 2. Label Encoding
label_encoder = LabelEncoder()
df['Ciudad_Label'] = label_encoder.fit_transform(df['Ciudad'])

# 3. One-Hot Encoding
onehot = pd.get_dummies(df['Ciudad'], prefix='Ciudad_OneHot')

# 4. Variables Dummy (eliminando una para evitar multicolinealidad)
dummies = pd.get_dummies(df['Ciudad'], prefix='Ciudad_Dummy', drop_first=True)

# 5. Escalamiento Min-Max
minmax_scaler = MinMaxScaler()
df[['Edad_MinMax', 'Ingresos_MinMax']] = minmax_scaler.fit_transform(df[['Edad', 'Ingresos']])

# 6. Escalamiento Z-Score (Estandarizaci√≥n)
zscore_scaler = StandardScaler()
df[['Edad_ZScore', 'Ingresos_ZScore']] = zscore_scaler.fit_transform(df[['Edad', 'Ingresos']])

# 7. Concatenar resultados finales
df_final = pd.concat([df, onehot, dummies], axis=1)

# Exportar
df_final.to_excel("datos_procesados.xlsx", index=False)

df_final